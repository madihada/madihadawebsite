[1] 장고 설치

    mv projects
    mkdir 프로젝트이름
    git init
    virtualenv --python=python3.6 venv
    source venv/bin/activate
    pip install django==2.2
    django-admin startproject 프로젝트이름 .

[2] 앱에 views로 페이지만들기

    1. terminal
        python manage.py startapp 앱이름

    2. urls.py in project
        from django.urls import path, include
        path('', include('앱이름.urls'))

    3. urls.py 생성
        from django.urls import path
        from . import views
        urlpatterns = [
            path('', views.함수이름, name='home'),
        ]

    4. views.py
        from django.http import HttpResponse
        def 함수이름(request):
            return HttpResponse("hello world")

    (팁! 함수이름을 정할 때, html파일 이름과 같게해주면 통일성이 생겨 코딩하기 쉽다)

[3] templates로 페이지 만들

    1. templates폴더 생성
    2. home.html 생성
    3. settings.py
        [os.path.join(BASE_DIR, 'templates')]
    4. views.py > def home)
        return render(request, 'home.html')
    (팁! 딕셔너리로, 다이나믹하게 사용방법 )
        return render(request, 'home.html' {'name' : 'Sim'})
        {{ name }}

[4] base.html 생성하여 기본데이터로 상속하기

    1. base.html
        <body bgcolor="lightpink">
            {% block content %}
            {% endblock %}
        </body>

    2. home.html
        {% extends 'base.html' %}
        {% block content %}
           <h1> hello world!!!! <h1>
        {% endblock  %}

[5] 데이터 request & response (from 클라이언트 to 서버)

    1. home.html
        <form action="add">
            enter 1st number : <input type="text" name="num1"><br>
            enter 2st number : <input type="text" name="num2"><br>
            <input type="submit">
        </form>

    2. urls.py
        path('add', views.add, name='add'),

    3. views.py
        def add(request):
            val1 = request.GET['num1']
            val2 = request.GET['num2']
            result = val1) + int(val2)
            return render(request, 'result.html', {'res' : 'result' )

    4. result.html
        {% extends 'base.html' %}
        {% block content %}
        The Result : {{ result }}
        {% endblock %}

    5. 데이터 POST로 받기
        - home.html
            <form action="add" method="post">
            {% csrf_token %}
        - views.py
            GET to POST

[6] 템플릿 다운받고 설치

    1. python manage.py startapp travello
    2. index.html 복사넣기
    3. urls.py (in project)
        path('', include('travello.urls')),

    4. urls.py (in travello)
        path('', views.index, name='index' ),

    5. views.py
        def index(request):
            return render(request, 'index.html')

    6. static파일 설치
        - settings.py
            STATICFILES_DIRS = [
                os.path.join(BASE_DIR, 'static')
            ]
            STATIC_ROOT = os.path.join(BASE_DIR, 'assets')

        - python manage.py collectstatic

        - index.html
            {% static ' absolute url ' %)

[7] html에 데이터 보내기 from views.py

    1. models.py
    2. views.py
    3. .html
    4. img는 jinja 안에 jinja라서 {% static "images" as baseUrl %}, 한개 더 추가해줘야함


[8] html에 데이터 보내기 from database

    1. postgres 설치, 파이썬(장고와)어댑터 설치

        (세 개 중 하나)
        pip install psycopg2==2.7.4
        pip install psycopg2-binary==2.8.3
        echo:$echopath : /Library/PostgreSQL/10/bin

    2. 장고에 설정
        settings.py
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'NAME': 'test',
                    'USER': 'postgres',
                    'PASSWORD': 'recon0928',
                    'HOST': 'localhost',
                    'PORT': '5432'
            }
            }
            INSTALLED_APPS = [
                'travello.apps.TravelloConfig'
            ]

    3. 장고와 연결
        python manage.py makemigrations
        (이 부분은 왜 있는거지... 다른사람은 안하던데 한번 꼭 넣어야하는지 테스트해봐야겠따)
        python manage.py sqlmigrate travello 0001
                                    (앱이름) : app.py와 연결
        python manage.py migrate

[9] Client가 데이터 보내기 to Database

    1. admin.py = admin에 model 넣기
        from django.contrib import admin
        from .models import Destination
        admin.site.register(Destination)

    2. settings.py = 미디어 루트 정하기 : 미디어파일 경로 표시
        MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
        MEDIA_URL = '/media/'

    3. urls.py in project = 이해안됨, url이 변경되므로 url을 static으로 알려주는거같
        from django.conf imoprt settings
        from django.conf.urls.static import static
        urlpatterns = urlpatterns + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)